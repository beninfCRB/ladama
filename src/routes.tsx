import { createBrowserRouter, Navigate, type RouteObject } from "react-router";
//@ts-expect-error Virtual module, generated by vite
// We need to ignore the ts error here because the virtual module is not included in the tsconfig.json
import routes from "virtual:generated-pages-react";
import { ProtectedRoute } from "./pages/layout/ProtectedRoute";
import { Layout } from "./pages/layout/Layout";
import NotFound from "./pages/layout/NotFound";

function stripPrefix(routes: RouteObject[], prefix: string) {
  return routes.map((r) => ({
    ...r,
    path: r.path?.replace(prefix, ""),
  }));
}

const authChildRoutes = stripPrefix(
  routes.filter((r: RouteObject) => r.path?.startsWith("auth")),
  "auth"
);
const downloadsChildRoutes = stripPrefix(
  routes.filter((r: RouteObject) => r.path?.startsWith("downloads")),
  "downloads"
);
const makerChildRoutes = stripPrefix(
  routes.filter((r: RouteObject) => r.path?.startsWith("maker")),
  "maker"
);

const router = createBrowserRouter([
  { path: "/", element: <Navigate to="/auth/login" replace /> },
  {
    path: "/auth",
    children: [
      {
        children: [
          ...authChildRoutes,
          { index: true, element: <Navigate to="/auth/login" replace /> },
        ],
      },
    ],
  },
  {
    path: "/downloads",
    element: <ProtectedRoute />,
    children: [
      {
        element: <Layout />,
        children: [
          ...downloadsChildRoutes,
          {
            index: true,
            element: <Navigate to="/downloads/documents" replace />,
          },
        ],
      },
    ],
  },
  {
    path: "/maker",
    element: <ProtectedRoute />,
    children: [
      {
        element: <Layout />,
        children: [
          ...makerChildRoutes,
          { index: true, element: <Navigate to="/maker/dashboard" replace /> },
        ],
      },
    ],
  },

  { path: "*", element: <NotFound /> },
]);

export { router };
